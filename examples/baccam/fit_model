#!/usr/bin/env python
# Copyright (C) 2014 Catherine Beauchemin <cbeau@users.sourceforge.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# =============================================================================

import baccam
import numpy
import phymcmc.fits

dat = numpy.loadtxt("baccam.dat")
dathpi = dat[:,0]
datV = dat[:,1]
dat = (dathpi,datV)

# Would either load params or initialize and fit
pdic = dict(
	Vlim = 10.0**0.5, # Limit of detection for V
	N = 4.0e8,	# Ncells as per paper
	tI = 24.0, nI=16,
	p = datV.max()*0.1/4.0e8,
	c = 0.1,
	b = 1.0/datV.max(),
	V0 = datV[0]
)
pfit = ['p','c','b','V0']
params = phymcmc.ParamStruct(pdic.copy(),pfit)

# Fit model to data
params,bfssr = phymcmc.fits.perform_fit(baccam.model,params,dat)

# Solve and save results
t = numpy.linspace(0.0,dathpi[-1])
res = baccam.model(params.vector, params).get_solution(t)
mV = numpy.hstack((numpy.matrix(t).T,res))
numpy.savetxt('soln_V.dat', mV)

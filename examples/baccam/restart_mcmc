#!/usr/bin/env python
# Copyright (C) 2014-2017 Catherine Beauchemin <cbeau@users.sourceforge.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# =============================================================================

import baccam
import multiprocessing
import numpy
import phymcmc.mcmc

dat = numpy.loadtxt("baccam.dat")
dathpi = dat[:,0]
datV = dat[:,1]
sigV = 1.0 # Should be standard deviation of residuals for best-fit, here=1.0
dat = (dathpi,datV,sigV)

# Only non-fitted param values of pdic will be retained
pdic = {'Vlim': 3.1622776601683795, 'nI': 16, 'c': 0.14348164740989799, 'b': 1.5655468237418551e-07, 'N': 400000000.0, 'V0': 56.255837462685221, 'p': 0.0011636160041053807, 'tI': 24.0}
pfit = ['p','c','b','V0']
params = baccam.params(pdic.copy(),pfit)
model = baccam.model(dat,params)

# MCMC parameters
mcpars = dict(
	chain_file = 'chain_keep1600.hdf5',
	model = model,
	nwalkers = 30,
	nsteps = 1600,
	# Parameters over which walkers will be linearly distributed initially
	# Note that all parameters will be walked in LINEAR space
	linpars = ['lnprob','tI'],
	threads = multiprocessing.cpu_count()
)

# Setting up the MCMC sampler
mcsampler = phymcmc.mcmc.MCSampler( **mcpars )
# Initalize walker position from last step of an existing chain
mcsampler.init_walkers_from_chain('chain_burn1000.hdf5')
# Performing the MCMC run
mcsampler.run_mcmc()

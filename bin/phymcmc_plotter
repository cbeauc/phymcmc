#!/usr/bin/env python
# Copyright (C) 2017-2024 Catherine Beauchemin <cbeau@users.sourceforge.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#
import argparse
import os
import phymcmc.plot

#
# =============================================================================
#
#                                   Utilities
#
# =============================================================================
#

def parse_args():
	parser = argparse.ArgumentParser(description='Produce plots from phymcmc hdf5 chainfiles.')

	# Required arguments
	parser.add_argument('chainfile',
		help='name of hdf5 chainfile to plot')
	parser.add_argument('savedirectory',
		help='path to directory where graph(s) should be saved')

	# Optional arguments
	parser.add_argument('-n','--nburn', type=int, default=0,
		help='number of burn-in steps (excluded from graphs)')
	parser.add_argument('-t','--type', default='all',
		help='type of plot (diag, hist, triangle, square, all). E.g. -t diag,hist')

	# Parsing arguments
	args = parser.parse_args()
	# Path + basename for plot(s)
	savename = args.chainfile.split(os.sep)[-1].split('.hdf5')[0]
	savename = args.savedirectory + '/' + savename
	# Parse types of plots requested
	plotsrequested = set(args.type.split(','))
	return args, savename, plotsrequested


#
# =============================================================================
#
#                                   Main
#
# =============================================================================
#

args, savename, plotsrequested = parse_args()
print('Will now plot for you:', plotsrequested)

if {'diag','all'} & plotsrequested:
	gridfig = phymcmc.plot.diagnostics( args.chainfile, nburn=args.nburn )
	gridfig.fig.savefig(savename+'_diag.png', bbox_inches='tight')

if {'hist','all'} & plotsrequested:
	gridfig = phymcmc.plot.hist_grid( [args.chainfile], nburn=args.nburn )
	gridfig.fig.savefig(savename+'_hist.pdf', bbox_inches='tight')

if {'triangle','all'} & plotsrequested:
	fig = phymcmc.plot.triangle( args.chainfile, nburn=args.nburn )
	fig.savefig(savename+'_triangle.svg', bbox_inches='tight')

if {'square','all'} & plotsrequested:
	gridfig = phymcmc.plot.square( args.chainfile, nburn=args.nburn )
	gridfig.fig.savefig(savename+'_square.pdf', bbox_inches='tight')
